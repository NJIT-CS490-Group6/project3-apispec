openapi: 3.0.0
info:
  description: "Group 6 API Specifications"
  version: "0.0.1-alpha1"
  title: Group 6 Backend APIs
  x-logo:
    url: https://docspera.com/assets/D3/pic/Logo-Full-White-Padded.png
    backgroundColor: "#0096FA"
    href: https://docspera.com
  contact:
    email: "lms35@njit.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: "friends"
    x-displayName: "Friends List APIs"
    description: "Friends list APIs"
  - name: "chats"
    x-displayName: "Chat APIs"
    description: "Chat APIs"
  - name: "status"
    x-displayName: "User Status APIs"
    description: "User Status APIs"
paths:
  /api/v1/friends:
    get:
      tags:
        - friends
      summary: get friends list
      operationId: getFriends
      responses:
        '200':
          description: friends list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                'friends list':
                  summary: friends list
                  value: |
                    [{"id":"f48c1eca-295d-4603-8433-bbfa645ce92a","username":"lucasantarella","name":"Luca Santarella","status":{"status":"available","timestamp":"2017-07-21T17:32:28Z"}}]
    post:
      tags:
        - friends
      summary: add a friend
      operationId: addFriend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  description: "username of the friend to add"
            example: |
              {"username":"lucasantarella"}
      responses:
        '200':
          description: added friend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                'friend':
                  summary: friend
                  value: |
                    {"id":"f48c1eca-295d-4603-8433-bbfa645ce92a","username":"lucasantarella","name":"Luca Santarella","status":{"status":"available","timestamp":"2017-07-21T17:32:28Z"}}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'error':
                  summary: error
                  value: |
                    {"error":"bad_request","description":"user does not exist"}
  /api/v1/friends/{friendId}:
    parameters:
      - name: friendId
        in: path
        description: friend id
        schema:
          type: string
          format: uuid
          description: user id of the friend
        required: true
    get:
      tags:
        - friends
      summary: get friend
      operationId: getFriend
      responses:
        '200':
          description: friends list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                'friends list':
                  summary: friends list
                  value: |
                    {"id":"f48c1eca-295d-4603-8433-bbfa645ce92a","username":"lucasantarella","name":"Luca Santarella","status":{"status":"available","timestamp":"2017-07-21T17:32:28Z"}}
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_does_not_exist:
                  summary: error
                  value: |
                    {"error":"bad_request","description":"friend not found"}
    delete:
      tags:
        - friends
      summary: remove friend
      operationId: removeFriend
      responses:
        '200':
          description: friend removed
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_does_not_exist:
                  summary: error
                  value: |
                    {"error":"bad_request","description":"friend not found"}
  /api/v1/threads:
    get:
      tags:
        - chats
      summary: get threads list
      operationId: getThreads
      responses:
        '200':
          description: threads list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
              examples:
                'thread list':
                  summary: thread list
    post:
      tags:
        - chats
      summary: create a thread
      operationId: addThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - participants
              properties:
                participants:
                  type: array
                  description: "array of user ids to be participants"
                  items:
                    type: string
            example: |
              {"participants":["9e31e822-ae2b-4074-884f-a36e1a7c4654", "7993a837-3dc7-48d9-bf76-b32e19de95f0", "00b4f670-50ef-4fe3-b78c-be65ca1b94d2"]}
      responses:
        '200':
          description: thread created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                'error':
                  summary: error
                  value: |
                    {"error":"bad_request","description":"user does not exist"}
  /api/v1/threads/{threadId}:
    parameters:
      - name: threadId
        in: path
        description: thread id
        schema:
          type: string
          format: uuid
          description: thread id
        required: true
    get:
      tags:
        - chats
      summary: get thread
      operationId: getThread
      responses:
        '200':
          description: thread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
    delete:
      tags:
        - chats
      summary: delete thread
      operationId: deleteThread
      responses:
        '200':
          description: thread deleted
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_does_not_exist:
                  summary: error
                  value: |
                    {"error":"bad_request","description":"thread not found"}
  /api/v1/threads/{threadId}/messages:
    parameters:
      - name: threadId
        in: path
        description: thread id
        schema:
          type: string
          format: uuid
          description: thread id
        required: true
    get:
      tags:
        - chats
      summary: get messages
      operationId: getThreadMessages
      responses:
        '200':
          description: thread
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - chats
      summary: send a message
      operationId: sendThreadMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: "message content"
            example: |
              {"content":"This is my message"}
      responses:
        200:
          description: message sent
          content:
            appplication/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/v1/me/status:
    put:
      tags:
        - status
      summary: update my status
      operationId: updateStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: integer
                  description: status int
            example:
              status: 1
      responses:
        200:
          description: status updated
          content:
            appplication/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  securitySchemes:
    signedCookie:
      type: apiKey
      in: cookie
      name: signedcookie
      description: signed jwt cookie
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      required:
        - error
        - description
      properties:
        error:
          type: string
          description: error type
        description:
          type: string
          description: error_message
    User:
      type: object
      required:
        - id
        - username
        - name
        - status
      properties:
        id:
          type: string
          format: uuid
          description: "user id"
        username:
          type: string
          description: "username"
        name:
          type: string
          description: "full name"
        status:
          type: object
          required:
            - status
            - timestamp
          properties:
            status:
              type: string
              enum:
                - available
                - busy
                - offline
            timestamp:
              type: string
              format: date-time
              description: "status changed timestamp"
    Message:
      type: object
      required:
        - id
        - seq
        - timestamp
        - from
        - content
      properties:
        id:
          type: string
          format: uuid
          description: "message id"
        seq:
          type: integer
          format: int64
          description: "sequence number in thread"
        timestamp:
          type: string
          format: date-time
          description: "timestamp"
        from:
          type: string
          format: uuid
          description: "user id that sent the message"
        content:
          type: string
          description: "message content"
    Thread:
      type: object
      required:
        - id
        - createdBy
        - created
        - name
        - participants
        - lastMessage
      properties:
        id:
          type: string
          format: uuid
          description: "thread id"
        createdBy:
          type: string
          format: uuid
          description: "uuid of the user who created the thread"
        created:
          type: string
          format: date-time
          description: "creation timestamp of thread"
        name:
          type: string
          description: "chat name"
        participants:
          type: array
          description: "list of participants"
          items:
            $ref: '#/components/schemas/User'
        lastMessage:
          $ref: '#/components/schemas/Message'
